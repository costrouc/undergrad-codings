Created by Peter Stewart and Christopher Ostrouchov
CPSC 405 - Intro to Computer Graphics - Bunny Project 1

1. Compiling
To compile the program simply execute make
   make -k
   ./phong plyexamples/bunny.ply
or simply use
   make -k
   make test

2. Location of files
main.c is where main is located
phong.c is where drawing takes place of plyobjects and floor, and
initialization
plyobject.c deals with reading in, generating normals, normalizing
etc.
keyinput.c and mouseinput.c deal with user input
shader.c reads in and prepares a program build with a vert and frag
shader
textures/ - contains the textures used in the framework
shader/ - contains the shaders used within our opengl program
plyexamples/ - contains example ply files that can be used (including bunny.ply)

3. Information on Capabilities of Framework
To Quit type ESC

Movement of Model:
q -> down Z
e -> up Z
w -> up Y
s -> down Y
a -> down X
d -> up X

Rotation of Model:
i -> rotate up along Z
p -> rotate down along Z
o -> rotate up along Y
l -> rotate down along Y
k -> rotate up along X
; -> rotate down along X

AntiAliasing:
Adjust parameter aliasingiter for number of aliasing iterations in
phong.c line: 115

Freeing recources on the GPU
Our code makes sure to dealocate all recources on the GPU when the
application is told to quit.

Bunny shading: Phong shading is used for the bunny, more specifically
a normalized Blinn-Phong shader is used on the bunny with 3 light
sources. Colors can be changed in phong.c along with the material
properties for the bunny.

Floor below bunny shading:
Seperate shader is used on floor, texture*.glsl
Loads in 3 textures (color, normal, bump), they are not properly
implemented in tangent space... we did not have enough time. Shading
phong shading is done on the textures with 1 light source LIGHT_0.

PLY parsing:
The ply file is read in with the vertices and faces. A function in
plyobject.c calculates the noramls for each face. It is possible to
switch using the RHS rule of LHS rule. Each of which affects which
side of the bunny is facing outwards. Each ply file is normalized to a
0 ... 1 box (preserving scaling). Framework was designed so that many
different ply files can be loaded. check out florida state's
http://people.sc.fsu.edu/~jburkardt/data/ply/ply.html for great ply
examples to load in.

PPM parsing:
As for texture files that our program can read in we can
handle ppm files. With three floats 4bytes per pixel. Textures are
allocated appropriatly.

Error Checking:
Code heavily uses error checking to provide feedback to the user is a
shader is not compiled properly etc. Also calls gl error to check if
there has been an error in functions that using opengl calls heavily
e.g. the render call. See utils.h and shader.h.

